# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных
# программах в рамках первых трех уроков. Проанализировать результат и определить
# программы с наиболее эффективным использованием памяти.

# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для
# одной и той же задачи. Результаты анализа вставьте в виде комментариев к коду.
# Также укажите версию Python и разрядность вашей ОС:
# Python 3.7.8 [MSC v.1916 64 bit (AMD64)] on win32
# ОС: Windows 7


import sys
import time
from random import randint


def get_size(item):
    print(f'Затраты памяти на элемент программы "{item}": {sys.getsizeof(item)}')


# Урок №1 Задача №5
# Пользователь вводит две буквы. Определить, на каких местах алфавита они стоят и сколько между ними находится букв.

print('Введите две буквы латинского алфавита:')
letter1 = input('letter1: ').lower()
letter2 = input('letter2: ').lower()

time_start1 = time.time()

pos_letter1 = ord(letter1) - 96
pos_letter2 = ord(letter2) - 96
distance = abs(pos_letter1 - pos_letter2) - 1
print(f'Буква "{letter1}" {pos_letter1}-я в алфавите\n'
      f'Буква "{letter2}" {pos_letter2}-я в алфавите\n'
      f'Между буквами {distance} букв')

time_finish1 = time.time()
print('Время выполнения алгоритма', time_finish1 - time_start1, 'секунд')

sum_member = sys.getsizeof(letter1) + sys.getsizeof(letter1) + sys.getsizeof(pos_letter1) + \
             sys.getsizeof(pos_letter1) + sys.getsizeof(distance)
print(f'Затраты памяти на переменные: {sum_member}')
get_size(letter1)
get_size(letter2)
get_size(pos_letter1)
get_size(pos_letter2)
get_size(distance)

# Введите две буквы латинского алфавита: letter1 = l, letter2 = m
# Затраты памяти на переменные: 180
# Время выполнения алгоритма 0.0 секунд. Алгоритм работает приблизительно за O(1).
# Пространственная сложность примерно O(1)
# Затраты памяти на элемент программы "l"(letter1): 50
# Затраты памяти на элемент программы "m"(letter2): 50
# Затраты памяти на элемент программы "12"(pos_letter1): 28
# Затраты памяти на элемент программы "13"(pos_letter2): 28
# Затраты памяти на элемент программы "0"(distance): 24


# Урок №2 Задача №2
# Посчитать четные и нечетные цифры введенного натурального числа. Например, если введено число 34560,
# то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

number = input('Введите любое натуральное число: ')

time_start2 = time.time()

even = 0
even_list = []
odd = 0
odd_list = []
numbers = [int(num) for num in number]
for num in numbers:
    if num % 2 == 0:
        even += 1
        even_list.append(num)
    else:
        odd += 1
        odd_list.append(num)
even_str = ','.join([str(i) for i in even_list])
odd_str = ','.join([str(n) for n in odd_list])
print(f'У вашего числа {even} четные цифры ({even_str}) и {odd} нечетные ({odd_str})')

time_finish2 = time.time()
print('Время выполнения алгоритма', time_finish2 - time_start2, 'секунд')

sum_member = sys.getsizeof(number) + sys.getsizeof(numbers) + sys.getsizeof(even) + sys.getsizeof(even_list) + \
             sys.getsizeof(odd) + sys.getsizeof(odd_list) + sys.getsizeof(even_str) + sys.getsizeof(odd_str)
print(f'Затраты памяти на переменные: {sum_member}')
get_size(number)
get_size(numbers)
get_size(even)
get_size(even_list)
get_size(even_str)
get_size(odd)
get_size(odd_list)
get_size(odd_str)

# Введите любое натуральное число: 144447854236
# Затраты памяти на переменные: 653
# Время выполнения алгоритма 0.0 секунд. Хоть алгоритм и отработал за 0 секунд, но его временная сложность около O(n),
# из-за присутствия цикла for.
# Пространственная сложность соответствует O(n).
# Затраты памяти на элемент программы "144447854236"(number): 61
# Затраты памяти на элемент программы "[1, 4, 4, 4, 4, 7, 8, 5, 4, 2, 3, 6]"(numbers): 192
# Затраты памяти на элемент программы "8"(even): 28
# Затраты памяти на элемент программы "[4, 4, 4, 4, 8, 4, 2, 6]"(even_list): 128
# Затраты памяти на элемент программы "4,4,4,4,8,4,2,6"(even_str): 64
# Затраты памяти на элемент программы "4"(odd): 28
# Затраты памяти на элемент программы "[1, 7, 5, 3]"(odd_list): 96
# Затраты памяти на элемент программы "1,7,5,3"(odd_str): 56


# Урок №2 Задача №8
# Матрица 5x4 заполняется вводом с клавиатуры кроме последних элементов строк. Программа
# должна вычислять сумму введенных элементов каждой строки и записывать ее в последнюю ячейку строки.
# В конце следует вывести полученную матрицу.

print('Для создания матрицы введите количество столбцов (x) и строк (y):')
x = int(input('x = '))
y = int(input('y = '))
print()

time_start3 = time.time()

arr = [[randint(1, 100) for i in range(x)] for j in range(y)]
min_lst = [min(arr[i][j] for i in range(y)) for j in range(x)]
for a in arr:
    print(('{:4d} ' * len(a)).format(*a))
    i = 0
    for j in a:
        if j < min_lst[i]:
            min_lst[i] = j
        i += 1

print('-' * x * 5)
print(('{:4d} ' * len(min_lst)).format(*min_lst))
print()

min_lst.sort()
print(f'Максимальный элемент среди минимальных элементов столбцов матрицы: {min_lst[0]}')

time_finish3 = time.time()
print('Время выполнения алгоритма', time_finish3 - time_start3, 'секунд')

sum_member = sys.getsizeof(x) + sys.getsizeof(y) + sys.getsizeof(arr) + sys.getsizeof(min_lst) + \
             sys.getsizeof(a) + sys.getsizeof(i)
print(f'Затраты памяти на переменные: {sum_member}')
get_size(x)
get_size(y)
get_size(arr)
get_size(min_lst)
get_size(a)
get_size(i)

# Для создания матрицы введите количество столбцов (x) и строк (y): x = 10, y = 10
# Затраты памяти на переменные: 2388
# Время выполнения алгоритма 0.0050 секунд. Временная сложность алгоритма O(n*m).
# Пространственная сложность соответствует O(n).
# Затраты памяти на элемент программы "10"(x): 28
# Затраты памяти на элемент программы "10"(y): 28
# Затраты памяти на элемент программы "[[78, 34, 96, 75, 74, 28, 56, 38, 41, 74],
# [87, 44, 46, 55, 7, 46, 75, 9, 53, 36], [11, 57, 3, 85, 19, 34, 15, 100, 11, 94],
# [89, 100, 17, 51, 68, 47, 4, 90, 40, 50], [2, 3, 49, 77, 92, 13, 37, 51, 74, 9],
# [67, 5, 1, 9, 55, 89, 91, 50, 13, 94], [70, 8, 76, 9, 92, 31, 26, 32, 82, 47],
# [80, 84, 81, 45, 58, 42, 89, 93, 66, 19], [76, 93, 27, 1, 9, 42, 79, 48, 55, 52],
# [87, 5, 89, 5, 94, 80, 6, 90, 46, 96]]"(arr): 192
# Затраты памяти на элемент программы "[1, 1, 2, 3, 4, 7, 9, 9, 11, 13]"(min_lst): 192
# Затраты памяти на элемент программы "[87, 5, 89, 5, 94, 80, 6, 90, 46, 96]"(a*10): 192 * 10 = 1920
# Затраты памяти на элемент программы "10"(i): 28

# Вывод: исходя из полученных данным, после проведения анализа выбранных задач, программа с наименьшим использованием
# памяти - первая. Т.к. её потребление памяти будет константным и предсказуемым за счет заранее определенного размера,
# количества и типа вводимых переменных (ввод всего 2-х букв). А вот затраты памяти на реализацию третьей программы
# самые высокие и не стабильные, т.к. сильно зависят от количества переменных матрицы (количества столбцов и строк),
# которые могут меняться из раза в раз и прохождением по ним циклом. Временные и пространственные затраты здесь велики.
