# Определить количество различных подстрок с использованием хеш-функции.
# Задача: на вход функции дана строка, требуется вернуть количество различных подстрок в этой строке.
# Примечание: в сумму не включаем пустую строку и строку целиком.

import time
import sys


def sub_str(string):
    h_lst = []
    for i in range(1, len(string)):
        for j in range(len(string)):
            h_str = hash(string[j:j + i])
            if h_str not in h_lst:
                h_lst.append(h_str)
    return len(h_lst)


s = input('Введите строку для определения количества, входящих в неё различных подстрок: ')
time_start = time.time()
print(f'Введенная строка имеет длину в {len(s)} символа и количество подстрок = {sub_str(s)}')
time_finish = time.time()
print(f'Время работы алгоритма {time_finish - time_start} секунд.')

sum_member = sys.getsizeof(s) + sys.getsizeof(sub_str(s))
print(f'Затраты памяти на переменные: {sum_member}')

# Введите строку для определения количества, входящих в неё различных подстрок: "kk" (2 символа)
# Время работы алгоритма 0.0 секунд.
# Затраты памяти на переменные: 79
# Введите строку, состоящую только из маленьких латинских букв: "my cat my dog my toots" (22 символа)
# Время работы алгоритма 0.0050 секунд.
# Затраты памяти на переменные: 99
# Введите строку для определения количества, входящих в неё различных подстрок:
# "every day we learn something new and get a new experience" (57 символов)
# Время работы алгоритма 0.2000 секунд.
# Затраты памяти на переменные: 134
# Алгоритм работает приблизительно за O(n**2).
# А пространственная сложность примерно O(n).
